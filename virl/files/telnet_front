#!/bin/bash

# Front TCP connection with a killable, timeouting and respawning socat

##set -x
##exec 2>&1 >>/tmp/tf$3.$5.log
APP=$0
PRIVATE=$1
OUTSIDE=$2
PORT=$3
SPID=$4
IDENT=$5

if [ -z "$PRIVATE" -o -z "$OUTSIDE" -o -z "$PORT" -o -z "$SPID" -o -z "$IDENT" ] ; then
    exit 1
fi

NODATATIME=900
CONNECTIME=10
EOFRSTTIME=5

# Avoid respawning endlessly; negative number to not limit this
declare -i LOOPS=-100

# All file descriptors of the KVM launching this get inherited and would linger
echo "$APP running for port $PORT" >&2
for fd in /proc/$$/fd/* ; do
    fd=${fd/*\/}
    case "$fd" in
    0|1|2|255) continue ;;
    [0-9]*)
        eval "exec $fd<&-"
        echo "$APP closing fd/$fd" >&2
    ;;
    esac
done

# Check that the kvm process is running and has IDENT in commandline
function running_parent() {
    local cmdline=""
    read cmdline </proc/$SPID/cmdline 2>/dev/null
    case "$cmdline" in
        *$IDENT*) return 0 ;;
    esac
    return 1
}

# Enable socat debug logs
DEBUG=""
##DEBUG="-d -d -d"

# Only accept one connection, and timeout accept(2) call after 900 secs
# struct timespec in hex (2 little-endian long ints - secs and nsecs)
ACCEPT_SECS="8403000000000000"
ACCEPT_NSEC="0000000000000000"

# 1 = SO_SOCKET level, 20 = SO_RCVTIMEO receive timeout option
LISTENOPTS="backlog=5,fork,setsockopt-bin=1:20:x$ACCEPT_SECS$ACCEPT_NSEC"

while running_parent && [ "$LOOPS" -ne 0 ]; do
    ##date
    ##echo "Running socat $PRIVATE:$PORT:$OUTSIDE (loops left $LOOPS)"
    LOOPS+=-1
    timeout --foreground --preserve-status 900 socat \
         $DEBUG -t $EOFRSTTIME -T $NODATATIME \
        "TCP-LISTEN:$PORT,bind=$OUTSIDE,reuseaddr,$LISTENOPTS" \
        "TCP6:[$PRIVATE]:$PORT,connect-timeout=$CONNECTIME" \

    result=$?
    ##echo "Socat ended with $result"
    ##date
    # avoid respawning on error too fast
    if [ $result -gt 0 ] ; then sleep $EOFRSTTIME ; fi
done
