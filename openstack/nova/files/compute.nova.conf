{% from "virl.jinja" import virl with context %}
[DEFAULT]
dhcpbridge = {{ salt['pillar.get']('nova:dhcpbridge', '/usr/bin/nova-dhcpbridge') }}
dhcpbridge_flagfile = {{ salt['pillar.get']('nova:dhcpbridge_flagfile', '/etc/nova/nova.conf') }}

{% if virl.mitaka %}
log_dir = {{ salt['pillar.get']('nova:logdir', '/var/log/nova') }}
use_neutron = True

{% else %}
logdir = {{ salt['pillar.get']('nova:logdir', '/var/log/nova') }}
{% endif %}


state_path = {{ salt['pillar.get']('nova:state_path', '/var/lib/nova') }}
lock_path = {{ salt['pillar.get']('nova:lock_path', '/var/lock/nova') }}
force_dhcp_release = {{ salt['pillar.get']('nova:force_dhcp_release', 'True') }}
iscsi_helper = {{ salt['pillar.get']('nova:iscsi_helper', 'tgtadm') }}

# should not be needed on computes
sql_connection = mysql://nova:{{ virl.mypassword }}@{{ virl.controller_ip }}/nova

libvirt_use_virtio_for_bridges=True

connection_type = {{ salt['pillar.get']('nova:connection_type', 'libvirt') }}
root_helper = {{ salt['pillar.get']('nova:root_helper', 'sudo nova-rootwrap /etc/nova/rootwrap.conf') }}

verbose = {{salt['pillar.get']('virl:debug', salt['grains.get']('debug', False)) }}
debug = {{salt['pillar.get']('virl:debug', salt['grains.get']('debug', False)) }}

firewall_driver = {{ salt['pillar.get']('nova:firewall_driver', 'nova.virt.firewall.NoopFirewallDriver') }}
rpc_backend = {{ salt['pillar.get']('nova:rpc_backend', 'rabbit') }}
auth_strategy = {{ salt['pillar.get']('nova:auth_strategy', 'keystone') }}

ec2_workers = 1
metadata_workers = 1
osapi_compute_workers = 10
ec2_private_dns_show_ip=True
api_paste_config=/etc/nova/api-paste.ini
volumes_path=/var/lib/nova/volumes
enabled_apis=osapi_compute,metadata

network_api_class = nova.network.neutronv2.api.API
neutron_url = http://{{ virl.controller_ip }}:9696
neutron_auth_strategy = keystone
neutron_admin_tenant_name = service
neutron_admin_username = neutron
neutron_admin_password = {{ virl.ospassword }}
neutron_admin_auth_url = http://{{ virl.controller_ip }}:35357/{{ virl.keystone_auth_version }}
security_group_api = nova

#Hey raaabbbit!
rabbit_host = {{ virl.controller_ip }}
rabbit_password = {{ virl.ospassword }}

my_ip = {{ virl.int_ip }}

ram_allocation_ratio = 5.0
scheduler_default_filters={{ salt['pillar.get']('virl:nova_filter', salt['grains.get']('nova_filter', 'RamFilter,AllHostsFilter,ComputeFilter' )) }}

quota_instances=100
quota_cores=30
quota_injected_files = 100
quota_injected_file_content_bytes = 800000

vif_plugging_timeout = 0

[oslo_middleware]
max_request_body_size = 10000000

[keystone_authtoken]

project_domain_id = default
user_domain_id = default
#auth_uri = http://{{ virl.controller_ip }}:5000
auth_url = http://{{ virl.controller_ip }}:35357
auth_plugin = password
project_name = service
username = nova
password = {{ virl.ospassword }}


[database]
# should not be needed on compute
connection = mysql://nova:{{ virl.mypassword }}@{{ virl.controller_ip }}/nova

[conductor]
workers = 1

[libvirt]
vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver
inject_partition = -2
use_usb_tablet = False
cpu_mode = {{ salt['pillar.get']('virl:libvirt_cpu_mode', salt['grains.get']('libvirt_cpu_mode', 'none')) }}
virt_type = kvm

[spice]
enabled = false

[neutron]
url = http://{{ virl.controller_ip }}:9696
{% if virl.mitaka %}
auth_type = password
project_name = service
username = neutron
password = {{ virl.ospassword }}
auth_url = http://{{ virl.controller_ip }}:35357/{{ virl.keystone_auth_version }}
auth_protocol = http
project_domain_id = default
user_domain_id = default
{% else %}
auth_strategy = keystone
admin_tenant_name = service
admin_username = neutron
admin_password = {{ virl.ospassword }}
admin_auth_url = http://{{ virl.controller_ip }}:35357/{{ virl.keystone_auth_version }}
{% endif %}

[vnc]
vncserver_listen = {{ virl.int_ip }}
vncserver_proxyclient_address = {{ virl.int_ip }}
novncproxy_port = {{ virl.vnc_port }}
novncproxy_base_url = http://127.0.1.1:{{ virl.vnc_port }}/vnc_auto.html

[serial_console]
proxyclient_address = 0.0.0.0
serialproxy_host = 0.0.0.0
serialproxy_port = {{ virl.serial_port }}
target_host = 0.0.0.0
#base_url = http://127.0.1.1:6083/serial.html
base_url = http://127.0.1.1:{{ virl.serial_port }}/serial.html
port_range = {{ virl.serstart }}:{{ virl.serend }}
enabled = True
redis_hostname = controller
redis_port = 6379

{% if virl.mitaka %}
[workarounds]
disable_libvirt_livesnapshot = False
{% endif %}

[glance]
api_servers = http://{{ virl.controller_ip }}:9292
